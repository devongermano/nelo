/**
 * @packageDocumentation
 * @module api.functional.scenes
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { CreateSceneDto } from "../../../../../apps/api/src/scenes/dto/create-scene.dto";
import type { UpdateSceneDto } from "../../../../../apps/api/src/scenes/dto/update-scene.dto";
import type { Scene } from "../../../../../apps/api/src/scenes/scenes.service";

/**
 * @controller ScenesController.create
 * @path POST /scenes
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  dto: CreateSceneDto,
): Promise<create.Output> {
  return PlainFetcher.propagate<any, any>(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    dto,
    create.stringify,
  );
}
export namespace create {
  export type Input = CreateSceneDto;
  export type Output = IPropagation<
    {
      201: Scene;
    },
    201
  >;

  export const METADATA = {
    method: "POST",
    path: "/scenes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/scenes";
  export const stringify = (input: Input) => typia.json.assertStringify(input);
}

/**
 * @controller ScenesController.update
 * @path PATCH /scenes/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string,
  dto: UpdateSceneDto,
): Promise<update.Output> {
  return PlainFetcher.propagate<any, any>(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(id),
    },
    dto,
    update.stringify,
  );
}
export namespace update {
  export type Input = UpdateSceneDto;
  export type Output = IPropagation<
    {
      200: Scene;
    },
    200
  >;

  export const METADATA = {
    method: "PATCH",
    path: "/scenes/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/scenes/${encodeURIComponent(id?.toString() ?? "null")}`;
  export const stringify = (input: Input) => typia.json.assertStringify(input);
}

/**
 * @controller ScenesController.get
 * @path GET /scenes/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection,
  id: string,
): Promise<get.Output> {
  return PlainFetcher.propagate<any>(connection, {
    ...get.METADATA,
    template: get.METADATA.path,
    path: get.path(id),
  });
}
export namespace get {
  export type Output = IPropagation<
    {
      200: Scene;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/scenes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/scenes/${encodeURIComponent(id?.toString() ?? "null")}`;
}
