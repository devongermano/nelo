/**
 * @packageDocumentation
 * @module api.functional.projects
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { Prisma } from ".prisma/client/index";
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { __type } from "@prisma/client/runtime/library";

/**
 * @controller ProjectsController.getAll
 * @path GET /projects
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getAll(connection: IConnection): Promise<getAll.Output> {
  return PlainFetcher.propagate<any>(connection, {
    ...getAll.METADATA,
    template: getAll.METADATA.path,
    path: getAll.path(),
  });
}
export namespace getAll {
  export type Output = IPropagation<
    {
      200: Prisma.PrismaPromise<Array<__type>>;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/projects",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/projects";
}
