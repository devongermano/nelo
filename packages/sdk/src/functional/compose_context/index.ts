/**
 * @packageDocumentation
 * @module api.functional.compose_context
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { ComposeContextResult } from "../../../../context/src/index";
import type { ComposeContextOptions } from "../../../../context/src/types";

/**
 * @controller ContextController.compose
 * @path POST /compose-context
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function compose(
  connection: IConnection,
  body: ComposeContextOptions,
): Promise<compose.Output> {
  return PlainFetcher.propagate<any, any>(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...compose.METADATA,
      template: compose.METADATA.path,
      path: compose.path(),
    },
    body,
    compose.stringify,
  );
}
export namespace compose {
  export type Input = ComposeContextOptions;
  export type Output = IPropagation<
    {
      201: ComposeContextResult;
    },
    201
  >;

  export const METADATA = {
    method: "POST",
    path: "/compose-context",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/compose-context";
  export const stringify = (input: Input) => typia.json.assertStringify(input);
}
